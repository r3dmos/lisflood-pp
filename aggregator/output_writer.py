# lisflood_temporal_aggregator/output_writer.py

import os
import xarray as xr
import pandas as pd
import logging

logger = logging.getLogger(__name__)

def get_lisflood_output_path(dir_name, map_name, binding_lisflood):
    """
    Constructs the full output path for a LISFLOOD-related file based on
    its LISFLOOD variable name and the binding settings.
    """
    if map_name in binding_lisflood:
        file_name = os.path.basename(binding_lisflood[map_name])
        return os.path.join(dir_name, file_name)
    else:
        logger.error(f"Map name '{map_name}' not found in LISFLOOD binding settings.")
        return os.path.join(dir_name, f"{map_name}_filename_not_in_binding.nc")

def save_timeseries_to_csv(timeseries_dfs, output_dir, original_var_name, output_freq_label):
    """
    Saves a dictionary of pandas DataFrames (time series) to CSV files.
    The filename is taken directly from the key generated by the aggregator.
    """
    if not timeseries_dfs:
        logger.debug(f"No time series data provided for {original_var_name} at {output_freq_label}. Skipping CSV save.")
        return

    os.makedirs(output_dir, exist_ok=True)
    for key, df in timeseries_dfs.items():
        filename = f"{key}.csv"
        csv_path = os.path.join(output_dir, filename)
        try:
            df.to_csv(csv_path, header=True, index=True)
            logger.info(f"  -> Saved {original_var_name} (freq: {output_freq_label}, key: {key}) to: {csv_path}")
        except Exception as e:
            logger.error(f"Error saving DataFrame for key '{key}' to CSV {csv_path}: {e}")

def save_netcdf_data(data_array, output_dir, filename=None):
    """
    Saves an xarray DataArray to a NetCDF file. If a filename is not provided,
    it is inferred from the DataArray's name attribute.

    Args:
        data_array (xarray.DataArray): The xarray DataArray to save.
        output_dir (str): Directory where the NetCDF file should be saved.
        filename (str, optional): The exact filename to use (e.g., 'dis_mm.nc').
                                  If None, defaults to 'data_array.name.nc'.
    """
    if data_array is None:
        logger.warning(f"DataArray is None. Cannot save NetCDF.")
        return
    
    if filename is None:
        if data_array.name is None:
            logger.error(f"DataArray has no name and no filename was provided. Skipping NetCDF save to directory: {output_dir}")
            return
        filename = f"{data_array.name}.nc"

    output_filepath = os.path.join(output_dir, filename)
    
    try:
        os.makedirs(output_dir, exist_ok=True)
        data_array.to_netcdf(output_filepath)
        logger.info(f"  -> Saved spatial data to: {output_filepath}")
    except Exception as e:
        logger.error(f"Error saving NetCDF to {output_filepath}: {e}")
